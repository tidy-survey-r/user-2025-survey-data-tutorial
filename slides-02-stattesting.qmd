---
title: "Statistical Testing"
format: revealjs
slide-number: true
title-slide-attributes:
      data-background: "#087e8b"
---

```{r}
#| label: load-pkgs
#| echo: false

###Added this just to get my sections to run, but will want to move into a section where we talk about what to install and get running.


library(tidyverse)
library(survey)
library(srvyr)
library(srvyrexploR)
library(gt)
library(countdown)

recs_des <- recs_2020 %>%
  as_survey_rep(
    weights = NWEIGHT,
    repweights = NWEIGHT1:NWEIGHT60,
    type = "JK1",
    scale = 59 / 60,
    mse = TRUE
  )

targetpop <- 231592693

anes_adjwgt <- anes_2020 %>%
  mutate(Weight = Weight / sum(Weight) * targetpop)

anes_des <- anes_adjwgt %>%
  as_survey_design(
    weights = Weight,
    strata = Stratum,
    ids = VarUnit,
    nest = TRUE
  )

```

# t-tests {background-color='{{< brand color secondary >}}'}

## t-tests

- Determine if one proportion or mean is statistically different from another

::: {.incremental}
- Different types:
  - One-Sample: Comparing our data to a set value
  - Two-Sample: Comparing two sets of data
    - Unpaired: Comparing two values for two different groups
    - Paired: Comparing two values for the same unit

:::

::: {.notes}
- Unpaired Examples: 
  - A/B testing
  - compare test scores for two different classrooms taught by two different instructors
- Paired Examples: 
  - compare test scores for each student at the beginning and end of class
  - water samples from a river before and after a treatment or environmental change

:::

## t-test syntax

Use the `svyttest()` function to compare two proportions or means.

Syntax:

```{r}
#| label: syntax-ttest-1
#| eval: false

svyttest(formula,
         design,
         ...)
```

::: {.notes}
- Similar to `t.test()` function in base R with the formula and the data arguments
:::


## t-test syntax

```{r}
#| label: syntax-ttest-error
#| error: true

recs_des %>%
  svyttest(SummerTempNight - 68 ~ 0, 
           na.rm = TRUE)
```

## t-test syntax

Use the `svyttest()` function to compare two proportions or means.

Syntax:

```{r}
#| label: syntax-ttest-2
#| eval: false
#| code-line-numbers: "2"

svyttest(formula,
         design,
         ...)
```

::: {.notes}
- as `design` argument is the second arugument, dot notation is needed
:::

# Dot notation {background-color='{{< brand color secondary >}}'}

## Dot notation

Let's walk through an example using the `towny` data.

```{r}
#| label: dot-notation-0

towny

```

## Dot notation 

Using the `towny` data, let's filter to only cities.

```{r}
#| label: dot-notation-1

filter(towny, csd_type == "city")

```

## Dot notation

Using the `towny` data, let's filter to only cities.

```{r}
#| label: dot-notation-2
#| eval: false
#| code-line-numbers: "2"

filter(towny, csd_type == "city")
towny %>% filter(csd_type == "city")

```

```{r}
#| label: dot-notation-2-run
#| echo: false

towny %>% filter(csd_type == "city")

```

## Dot notation 

Using the `towny` data, let's filter to only cities.

```{r}
#| label: dot-notation-3
#| eval: false
#| code-line-numbers: "3"

filter(towny, csd_type == "city")
towny %>% filter(csd_type == "city")
towny %>% filter(., csd_type == "city")
```

```{r}
#| label: dot-notation-3-run
#| echo: false

towny %>% filter(., csd_type == "city")

```

## Dot notation 

Using the `towny` data, let's filter to only cities.

```{r}
#| label: dot-notation-4
#| eval: false
#| code-line-numbers: "4"

filter(towny, csd_type == "city")
towny %>% filter(csd_type == "city")
towny %>% filter(., csd_type == "city")
towny %>% filter(.data = ., csd_type == "city")
```

```{r}
#| label: dot-notation-4-run
#| echo: false

towny %>% filter(.data = ., csd_type == "city")

```

# Example <br>one-sample t-test {background-color='{{< brand color blue >}}'}

## Example: one-sample t-test

::: {.incremental}
- one sample t-tests compare data against a single value
- Stephanie usually sets her home to 68&deg;F at night during the summer. Is this different from the average household in the U.S.?
- Use `SummerTempNight`
:::

## Example: one-sample t-test

Test if the average U.S. household sets its temperature at a value different from 68&deg;F using `svyttest()`:

``` {r}
#| eval: false
#| label: ttest-onesamp-noeval
#| code-line-numbers: '|3|4'
recs_des %>%
  svyttest(
    formula = SummerTempNight - 68 ~ 0, 
    design = ., 
    na.rm = TRUE
  )
```

- Formula to test if the true mean of `SummerTempNight` variable minus 68&deg;F is equal to 0
- Dot notation `.` that passes the `recs_des` object into the `design` argument

## Results: one-sample t-test

Test if the average U.S. household sets its temperature at a value different from 68&deg;F using `svyttest()`:

```{r}
#| label: ttest-onesamp
recs_des %>%
  svyttest(
    formula = SummerTempNight - 68 ~ 0,
    design = .,
    na.rm = TRUE
  )
```

::: {.notes}
- Sample estimate mean is the difference between the U.S. average and Stephanie's house
- Result: Stephanie keeps her house cold in the summer!
:::

# Example <br>unpaired two-sample t-test {background-color='{{< brand color blue >}}'}

## Example: unpaired two-sample t-test 

::: {.incremental}
- Two-sample t-test compares data from two populations
- On average, is there a significant different electric bill for households with and without air-conditioning?
- Using `DOLLAREL` for the electricity bill and `ACUsed` to determine if households have air-conditioning
:::

## Example: unpaired two-sample t-test

Test if the electricity expenditure is significantly different for homes with and without air-conditioning.

```{r}
#| eval: false
#| label: ttest-unpaired-noeval
#| code-line-numbers: '|3|4'
recs_des %>%
  svyttest(
    formula = DOLLAREL ~ ACUsed,
    design = ., 
    na.rm = TRUE
  )
```

- Formula with electricity expenditure on the left and air-conditioning usage on the right
- Dot notation `.` that passes the `recs_des` object into the `design` argument

## Results: unpaired two-sample t-test

Test if the electricity expenditure is significantly different for homes with and without air-conditioning:

```{r}
#| label: ttest-unpaired
recs_des %>%
  svyttest(
    formula = DOLLAREL ~ ACUsed,
    design = ., 
    na.rm = TRUE
  )
```

::: {.notes}
- Household with AC have higher electrical bill
:::

# Example <br>paired two-sample t-test {background-color='{{< brand color blue >}}'}

## Example: paired t-test

Do U.S. households set their thermostat differently at night in the summer and winter?

```{r}
#| label: ttest-paired

recs_des %>%
  svyttest(
    formula = SummerTempNight - WinterTempNight ~ 0,
    design = ., 
    na.rm = TRUE
  )
```


# Your Turn {background-color='{{< brand color pink >}}'}

```{r}
#| label: ttest-ex-clock
#| echo: false
# 15 minutes, warning at 5 minutes
countdown::countdown(minutes = 15, seconds = 0, play_sound = TRUE, warn_when=5*60)
```


# Chi-square tests {background-color='{{< brand color secondary >}}'}

## Chi-square tests

- compare multiple proportions to see if they are statistically different from each othter

::: {.incremental}
- Different types:
  - Goodness-of-fit tests compare observed data to expected data
  - Tests of independence compare two types of observed data to see if there is a relationship
  - Tests of homogeneity compare two distributions to see if they match
  
:::

## Chi-square syntax

There are two functions that we use to compare proportions:

- `svygofchisq()`: For goodness-of-fit tests
- `svychisq()`: For tests of independence and homogeneity

## Syntax for goodness-of-fit tests

```{r}
#| label: syntax-chisq-1
#| eval: false
#| code-line-numbers: "|2|3"

svygofchisq(formula,
            p,
            design,
            na.rm=TRUE,
            ...)
```

## Syntax for tests of independence and homogeneity

```{r}
#| label: syntax-chisq-2
#| eval: false
#| code-line-numbers: "|3|2"
#| 
svychisq(formula,
         design, 
         statistic = c("F",  "Chisq", "Wald", "adjWald", 
                       "lincom", "saddlepoint"),
         na.rm=TRUE,
         ...)
```

# Example <br>goodness-of-fit test {background-color='{{< brand color blue >}}'}

## Example: goodness-of-fit test

- Is the education distribution from the 2020 ANES survey data the same as the 18+ population in the U.S. as of 2020?
  - 11% had less than a high school degree
  - 27% had a high school degree
  - 29% had some college or an associate’s degree
  - 33% had a bachelor’s degree or higher

## Example: goodness-of-fit test

Let's check to see if the education levels from the ANES match the levels from the ACS

```{r}
#| label: chisq-gof-educ1

anes_des %>%
  drop_na(Education) %>%
  group_by(Education) %>%
  summarize(p = survey_mean())
```

## Example: goodness-of-fit test

Let's collapse Bachelor's and Graduate degrees into a single category for comparison.

```{r}
#| label: chisq-gof-educ2

anes_des_educ <- anes_des %>%
  mutate(Education2 = 
           fct_collapse(Education,
                        "Bachelor or Higher" = c("Bachelor's","Graduate"))
         )

anes_des_educ %>%
  drop_na(Education2) %>%
  group_by(Education2) %>%
  summarize(p = survey_mean())

```


## Results: goodness-of-fit test

Test to see if the ANES education matches the population percentages 

```{r}
#| label: chisq-gof-results
anes_des_educ %>%
  svygofchisq(
    formula = ~Education2,
    p = c(0.11, 0.27, 0.29, 0.33),
    design = .,
    na.rm = TRUE
  )

```

## Results: goodness-of-fit test

```{r}
#| label: chisq-gof-graph
#| echo: false

anes_des_educ %>%
  drop_na(Education2) %>%
  group_by(Education2) %>%
  summarize(Observed = survey_mean(vartype = "ci")) %>%
  rename(Education = Education2) %>%
  mutate(Expected = c(0.11, 0.27, 0.29, 0.33)) %>%
  select(Education, Expected, everything()) %>%
  pivot_longer(
    cols = c("Expected", "Observed"),
    names_to = "Names",
    values_to = "Proportion"
  ) %>%
  mutate(
    Observed_low = if_else(Names == "Observed", Observed_low, NA_real_),
    Observed_upp = if_else(Names == "Observed", Observed_upp, NA_real_),
    Names = if_else(Names == "Observed",
      "ANES (observed)", "ACS (expected)"
    )
  ) %>%
  ggplot(aes(x = Education, y = Proportion, color = Names)) +
  geom_point(alpha = 0.75, size = 2) +
  geom_errorbar(aes(ymin = Observed_low, ymax = Observed_upp),
    width = 0.25
  ) +
  theme_bw() +
  scale_color_manual(name = "Type", values = c("#ff8484","#0b3954")) +
  theme(legend.position = "bottom", legend.title = element_blank())

```

# Examples <br> test of independence and homogeneity {background-color='{{< brand color blue >}}'}

## Example: test of independence

ANES asked respondents two questions about trust:
  - Question text: “How often can you trust the federal government to do what is right?”
  - Question text: “How often can you trust other people?”
  
Run a test of independence to see if the distributions of these two questions are similar. 

```{r}
anes_des %>%
  svychisq(
    formula = ~ TrustGovernment + TrustPeople,
    design = .,
    statistic = "Wald",
    na.rm = TRUE
  )
```

# Your Turn {background-color='{{< brand color pink >}}'}

Open `chisq_exercises.qmd`

```{r}
#| label: chisq-ex-clock
#| echo: false
# 15 minutes, warning at 5 minutes
countdown::countdown(minutes = 15, seconds = 0, play_sound = TRUE, warn_when=5*60)
```