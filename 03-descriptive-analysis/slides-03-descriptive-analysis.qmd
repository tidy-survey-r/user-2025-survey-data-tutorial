---
title: "Descriptive Analysis"
format: revealjs
slide-number: true
title-slide-attributes: 
  data-background: "#087e8b"
---

## Introduction

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(srvyr)
library(srvyrexploR)
library(broom)
```

<!--TODO: Add ratios? Standard deviation? across()? purrr?-->

Descriptive analyses lay the groundwork for the next steps of running statistical tests or developing models.

. . .

Calculate point estimates of...

- *Unknown population parameters*, such as mean.

. . .

- *Uncertainty estimates*, such as confidence intervals.

# Types of Data {background-color='{{< brand color secondary >}}' .smaller}

## Types of Data

::: incremental

* Categorical/nominal data: variables with levels or descriptions that cannot be ordered, such as the region of the country (North, South, East, and West)
* Ordinal data: variables that can be ordered, such as those from a Likert scale (strongly disagree, disagree, agree, and strongly agree)
* Discrete data: variables that are counted or measured, such as number of children
* Continuous data: variables that are measured and whose values can lie anywhere on an interval, such as income

:::

## Types of Data

We can determine which statistics to use depending on the type of data.

<!--TODO: Make a chart-->

# Types of Measures {background-color='{{< brand color secondary >}}'}

## Measures of Distribution

Measures of distribution describe how often an event or response occurs. 

We cover the following functions:

* Count of observations (`survey_count()` and `survey_tally()`)
* Summation of variables (`survey_total()`)

## Measures of Central Tendency

Measures of central tendency find the central (or average) responses. These measures include means and medians. 

* Means and proportions (`survey_mean()` and `survey_prop()`)
* Quantiles and medians (`survey_quantile()` and `survey_median()`)

## Measure of Relationships

Measures of relationship describe how variables relate to each other. These measures include correlations and ratios. 

- Correlations (`survey_corr()`)
- Ratios (`survey_ratio()`)

## Measures of Dispersion

Measures of dispersion describe how data spread around the central tendency for continuous variables. These measures include standard deviations and variances. We cover the following functions:

- Variances and standard deviations (`survey_var()` and `survey_sd()`)

# Survey Analysis Process {background-color='{{< brand color secondary >}}'}

## Overview of Survey Analysis using the {srvyr} Package

1. Create a `tbl_svy` object (a survey object) using: `as_survey_design()` or `as_survey_rep()`

```{r}
#| include: false
targetpop <- 231592693

anes_adjwgt <- anes_2020 %>%
  mutate(Weight = Weight / sum(Weight) * targetpop)
```

## Overview of Survey Analysis using the {srvyr} Package

:::: {.columns}

::: {.column width="45%"}

For ANES:

```{r}
#| message: false
#| warning: false
anes_des <- anes_adjwgt %>%
  as_survey_design(
    weights = Weight,
    strata = Stratum,
    ids = VarUnit,
    nest = TRUE
  )
```

:::

::: {.column width="55%"}

For RECS:

```{r}
#| message: false
#| warning: false
recs_des <- recs_2020 %>%
  as_survey_rep(
    weights = NWEIGHT,
    repweights = NWEIGHT1:NWEIGHT60,
    type = "JK1",
    scale = 59 / 60,
    mse = TRUE
  )
```

:::

::::

## Overview of Survey Analysis using the {srvyr}` Package

2. Subset data (if needed) using `filter()` (to create subpopulations)

3. Specify domains of analysis using `group_by()`

4. Specify variables to calculate, including means, totals, proportions, quantiles, and more

# Count of Observations {background-color='{{< brand color secondary >}}'}

## `survey_count()`: Count of Observations

::: incremental
- Calculate the estimated observation counts for a given variable or combination of variables
- Applied to categorical data
- Sometimes called "cross-tabulations" or "cross-tabs"
- `survey_count()` functions similarly to `dplyr::count()` in that it is <b>NOT</b> called within `summarize()`
:::

## `survey_count()` Syntax

```{r}
#| eval: false
#| code-line-numbers: "|2|3|4|5|6|7|8"
survey_count(
  x,
  ...,
  wt = NULL,
  sort = FALSE,
  name = "n",
  .drop = dplyr::group_by_drop_default(x),
  vartype = c("se", "ci", "var", "cv")
)
```

# Example <br>count of observations {background-color='{{< brand color blue >}}'}

## Example: count of observations

Calculate the estimated number of households in the U.S. using (RECS) data:

```{r}
#| eval: false
recs_des %>%
  survey_count()
```
. . .

```{r}
#| echo: false
recs_des %>%
  survey_count()
```

## Example: count of subgroups

Calculate the estimated number of observations for Region and Division:

```{r}
#| eval: false
#| code-line-numbers: "|2"
recs_des %>%
  survey_count(Region, Division, name = "N")
```

. . .

```{r}
#| echo: false
recs_des %>%
  survey_count(Region, Division, name = "N")
```

# Summation of Variables {background-color='{{< brand color secondary >}}'}

## `survey_total()`: Summation of Variables

::: incremental
- Calculate the estimated total quantity in a population
- Applied to continuous data
- Must be called within `summarize()`
- If used with no x-variable, `survey_total()` calculates a population count estimate within `summarize()`
:::

## `survey_total()` syntax

```{r}
#| eval: false
survey_total(
  x,
  na.rm = FALSE,
  vartype = c("se", "ci", "var", "cv"),
  level = 0.95,
  deff = FALSE,
  df = NULL
)
```

# Example <br>summation of variables {background-color='{{< brand color blue >}}'}

## Example: Calculating total estimate (discrete)

Calculate the U.S. population count estimate:

```{r}
#| eval: false
recs_des %>%
  summarize(Tot = survey_total())
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(Tot = survey_total())
```

::: notes
Note that this result obtained from `survey_total()` is equivalent to the ones from the `survey_count()`, but `survey_total()` is called within `summarize()`.
:::

## Example: Calculating total estimate (continuous)

Calculate the total cost of electricity in whole dollars:

```{r}
#| eval: false
recs_des %>%
  summarize(elec_bill = survey_total(DOLLAREL))
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(elec_bill = survey_total(DOLLAREL))
```

## Example: Calculating total estimate with groups

Calculate the variation in the cost of electricity in whole dollars across regions:

```{r}
#| code-line-numbers: "|2|4"
recs_des %>%
  group_by(Region) %>%
  summarize(elec_bill = survey_total(DOLLAREL,
    vartype = "ci"
  ))
```

::: notes
Recall that `group_by()` precedes the creation of variables.
:::

# Means and proportions {background-color='{{< brand color secondary >}}'}

## `survey_mean()` and `survey_prop()`: Means and Proportions

::: incremental
- Calculate the estimated observation counts for a given variable or combination of variables
- `survey_mean()` applied to continuous data, `survey_prop()` to catagorical data
- Must be called within `summarize()`
:::

## `survey_mean()` Syntax

```{r}
#| eval: false
#| code-line-numbers: "|2|6"
survey_mean(
  x,
  na.rm = FALSE,
  vartype = c("se", "ci", "var", "cv"),
  level = 0.95,
  proportion = FALSE,
  prop_method = c("logit", "likelihood", "asin", "beta", "mean"),
  deff = FALSE,
  df = NULL
)
```

::: notes
The survey_mean() function includes the first argument x, representing the variable or expression on which the mean should be calculated. The survey_mean() function can be used to calculate both means and proportions. Its proportion argument defaults to FALSE, indicating it is used for calculating means. If we wish to calculate a proportion using survey_mean(), we need to set the proportion argument to TRUE.
:::

## `survey_prop()` Syntax

```{r}
#| eval: false
#| code-line-numbers: "|1,2|5"
survey_prop(
  na.rm = FALSE,
  vartype = c("se", "ci", "var", "cv"),
  level = 0.95,
  proportion = TRUE,
  prop_method =
    c("logit", "likelihood", "asin", "beta", "mean", "xlogit"),
  deff = FALSE,
  df = NULL
)
```

::: notes
The survey_prop() does not have an argument to include the variables directly. Instead, prior to summarize(), we must use the group_by() function to specify the variables of interest for survey_prop(). For survey_mean(), including a group_by() function allows us to obtain the means by different groups.

In the survey_prop() function, the proportion argument defaults to TRUE because the function is specifically designed for calculating proportions.
:::

# Example <br>means and proportions {background-color='{{< brand color blue >}}'}

## Example: One Variable Proportion

Calculate the proportion of people in each region in the RECS data:

```{r}
#| eval: false
recs_des %>%
  group_by(Region) %>%
  summarize(p = survey_prop())
```

. . .

```{r}
#| echo: false
recs_des %>%
  group_by(Region) %>%
  summarize(p = survey_prop())
```

## Example: One Variable Proportion

Calculate the proportion of people in each region in the RECS data:

```{r}
#| eval: false
recs_des %>%
  group_by(Region) %>%
  summarize(p = survey_mean())
```

```{r}
#| echo: false
recs_des %>%
  group_by(Region) %>%
  summarize(p = survey_mean())
```

::: notes
Note that the proportions in column p add up to one. The survey_prop() function is essentially the same as using survey_mean() with a categorical variable and without specifying a numeric variable in the x argument.
:::

## Example: Conditional Proportions

Calculate the proportion of housing units by Region and whether air conditioning (A/C) is used:

```{r}
#| eval: false
recs_des %>%
  group_by(Region, ACUsed) %>%
  summarize(p = survey_prop())
```

. . .

```{r}
#| echo: false
recs_des %>%
  group_by(Region, ACUsed) %>%
  summarize(p = survey_prop())
```

::: notes
When specifying multiple variables, the proportions are conditional. In the results above, notice that the proportions sum to 1 within each region. This can be interpreted as the proportion of housing units with A/C within each region. For example, in the Northeast region, approximately 11.0% of housing units don’t have A/C, while around 89.0% have A/C.
:::

## Example: Joint Proportions

Calculate the joint proportion for each combination using `interact()`:

```{r}
#| eval: false
recs_des %>%
  group_by(interact(Region, ACUsed)) %>%
  summarize(p = survey_prop())
```

. . .

```{r}
#| echo: false
recs_des %>%
  group_by(interact(Region, ACUsed)) %>%
  summarize(p = survey_prop())
```

::: notes
In this case, all proportions sum to 1, not just within regions. This means that 15.8% of the population lives in the Northeast and has A/C. As noted earlier, we can use both the survey_prop() and survey_mean() functions, and they produce the same results. 
:::

## Example: Overall Mean

Calculate the estimated average cost of electricity in the U.S.:

```{r}
#| eval: false
#| code-line-numbers: "|3"
recs_des %>%
  summarize(elec_bill = survey_mean(DOLLAREL,
    vartype = c("se", "ci")
  ))
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(elec_bill = survey_mean(DOLLAREL,
    vartype = c("se", "ci")
  ))
```

## Example: Mean by Subgroup

Calculate the estimated average cost of electricity in the U.S. by each region:

```{r}
#| eval: false
#| code-line-numbers: "|2"
recs_des %>%
  group_by(Region) %>%
  summarize(elec_bill = survey_mean(DOLLAREL))
```

. . .

```{r}
#| echo: false
#| code-line-numbers: "|2"
recs_des %>%
  group_by(Region) %>%
  summarize(elec_bill = survey_mean(DOLLAREL))
```

# Your Turn {background-color='{{< brand color pink >}}'}

* Open `03-descriptive-exercises.qmd`
* Work through **Exercises - Part 1**

```{r}
#| label: descriptive-ex-clock-1
#| echo: false
# 10 minutes, warning at 5 minutes
countdown::countdown(minutes = 10, seconds = 0, play_sound = TRUE, warn_when = 5 * 60)
```

# Quantiles and Medians {background-color='{{< brand color secondary >}}'}

## `survey_quantile()` and `survey_median()`: Quantiles and Medians

::: incremental
- Calculate quantiles at specific points
- Because median is a special, common case of quantiles, there is the `survey_median()` function
- Must be called within `summarize()`
:::

## `survey_quantile()` Syntax

```r
survey_quantile(
  x,
  quantiles,
  na.rm = FALSE,
  vartype = c("se", "ci", "var", "cv"),
  level = 0.95,
  interval_type = 
    c("mean", "beta", "xlogit", "asin", "score", "quantile"),
  qrule = c("math", "school", "shahvaish", "hf1", "hf2", "hf3", 
            "hf4", "hf5", "hf6", "hf7", "hf8", "hf9"),
  df = NULL
)
```

# Example <br>quantiles and medians {background-color='{{< brand color blue >}}'}

## Example: Quantiles

Calculate the first quartile (p=0.25), the median (p=0.5), and the third quartile (p=0.75) of electric bills:

```{r}
#| eval: false
recs_des %>%
  summarize(elec_bill = survey_quantile(DOLLAREL,
    quantiles = c(0.25, .5, 0.75)
  ))
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(elec_bill = survey_quantile(DOLLAREL,
    quantiles = c(0.25, .5, 0.75)
  ))
```

# Example <br>quantiles and medians {background-color='{{< brand color blue >}}'}

## Example: median

Calculate the estimated median cost of electricity in the U.S.:

```{r}
#| eval: false
recs_des %>%
  summarize(elec_bill = survey_median(DOLLAREL))
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(elec_bill = survey_median(DOLLAREL))
```

# Correlations {background-color='{{< brand color secondary >}}'}

## `survey_corr()`: Measure the linear relationship between two continuous variables

::: incremental
- The most commonly used method is Pearson’s correlation
- Ranges between –1 and 1
:::

## `survey_corr()` Syntax

```r
survey_corr(
  x,
  y,
  na.rm = FALSE,
  vartype = c("se", "ci", "var", "cv"),
  level = 0.95,
  df = NULL
)
```

# Example <br>correlation {background-color='{{< brand color blue >}}'}

## Example: correlation

Calculate the correlation between the total square footage of homes and electricity consumption:

```{r}
#| eval: false
recs_des %>%
  summarize(SQFT_Elec_Corr = survey_corr(TOTSQFT_EN, BTUEL))
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(SQFT_Elec_Corr = survey_corr(TOTSQFT_EN, BTUEL))
```

# Unweighted analysis {background-color='{{< brand color secondary >}}'}

## `unweighted()`: Unweighted analysis

::: incremental

- Sometimes, it is helpful to calculate an unweighted estimate of a given variable
- `unweighted()` does not extrapolate to a population estimate
- Used in conjunction with any {dplyr} functions

:::

# Example <br>unweighted analysis {background-color='{{< brand color blue >}}'}

## Example: Unweighted Analysis

Calculate the unweighted average household electricity cost: 

```{r}
#| eval: false
#| code-line-numbers: "|4"
recs_des %>%
  summarize(
    elec_bill = survey_mean(DOLLAREL),
    elec_unweight = unweighted(mean(DOLLAREL))
  )
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(
    elec_bill = survey_mean(DOLLAREL),
    elec_unweight = unweighted(mean(DOLLAREL))
  )
```

# Subpopulation analysis {background-color='{{< brand color secondary >}}'}

## `filter()`: Subpopulation Analysis

::: incremental
- Use `filter()` to subset a survey object for analysis
- Must be done after creating the survey design object
:::

# Example <br>subpopulation analysis {background-color='{{< brand color blue >}}'}

## Example: subpopulation analysis

Calculate an estimate of the average amount spent on natural gas among housing units using natural gas:

```{r}
#| eval: false
recs_des %>%
  filter(BTUNG > 0) %>%
  summarize(NG_mean = survey_mean(DOLLARNG,
    vartype = c("se", "ci")
  ))
```

. . .

```{r}
#| echo: false
recs_des %>%
  filter(BTUNG > 0) %>%
  summarize(NG_mean = survey_mean(DOLLARNG,
    vartype = c("se", "ci")
  ))
```

# Adding summary rows {background-color='{{< brand color secondary >}}'}

## `cascade()`: Adding Summary Rows

::: incremental
- Creates a summary row for the estimate representing the entire population
- The {srvyr} package has the convenient cascade() function
- Used instead of `summarize()`
:::

## `cascade()`: Syntax

```r
cascade(
  .data, 
  ..., 
  .fill = NA, 
  .fill_level_top = FALSE, 
  .groupings = NULL
)
```

# Example <br>summary rows {background-color='{{< brand color blue >}}'}

## Example: Adding summary rows

Calculate the average household electricity cost. Let's build on it to show the features of `cascade()`:

```{r}
#| eval: false
#| code-line-numbers: "|2"
recs_des %>%
  cascade(DOLLAREL_mn = survey_mean(DOLLAREL))
```

. . .

```{r}
#| echo: false
recs_des %>%
  cascade(DOLLAREL_mn = survey_mean(DOLLAREL))
```

## Example: Adding summary rows with groups

Group by region:

```{r}
#| eval: false
#| code-line-numbers: "|2"
recs_des %>%
  group_by(Region) %>%
  cascade(DOLLAREL_mn = survey_mean(DOLLAREL))
```

. . .

```{r}
#| echo: false
recs_des %>%
  group_by(Region) %>%
  cascade(DOLLAREL_mn = survey_mean(DOLLAREL))
```

## Example: Adding summary rows with groups

Give the summary row a better name with `.fill`:

```{r}
#| eval: false
#| code-line-numbers: "|5"
recs_des %>%
  group_by(Region) %>%
  cascade(
    DOLLAREL_mn = survey_mean(DOLLAREL),
    .fill = "National"
  )
```

. . .

```{r}
#| echo: false
recs_des %>%
  group_by(Region) %>%
  cascade(
    DOLLAREL_mn = survey_mean(DOLLAREL),
    .fill = "National"
  )
```

## Example: Adding summary rows with groups

Move the summary row to the top with `.fill_level_top = TRUE`:

```{r}
#| eval: false
#| code-line-numbers: "|6"
recs_des %>%
  group_by(Region) %>%
  cascade(
    DOLLAREL_mn = survey_mean(DOLLAREL),
    .fill = "National",
    .fill_level_top = TRUE
  )
```

. . .

```{r}
#| echo: false
recs_des %>%
  group_by(Region) %>%
  cascade(
    DOLLAREL_mn = survey_mean(DOLLAREL),
    .fill = "National",
    .fill_level_top = TRUE
  )
```

# Wrap Up {background-color='{{< brand color secondary >}}'}

## Wrap Up

Descriptive analyses...

- lay the groundwork for the next steps of running statistical tests or developing models
- help us glean insight into the data, the underlying population, and any unique aspects of the data or population

## Wrap Up

The {srvyr} package has functions for calculating measures of distribution, central tendency, relationship, and dispersion.

- Depending on the type of data, we determine what statistics to calculate

## Wrap Up

- We create variables after creating the design object, running the functions on the `tbl_svy` object
- `filter()` and `group_by()` precede the calculation functions, but still follow the design object
- There are additional functions for unweighted analyses and calculating summary rows

# Your Turn {background-color='{{< brand color pink >}}'}

* Open `03-descriptive-exercises.qmd`
* Work through **Exercises - Part 2**

```{r}
#| label: descriptive-ex-clock-2
#| echo: false
# 10 minutes, warning at 5 minutes
countdown::countdown(minutes = 10, seconds = 0, play_sound = TRUE, warn_when = 5 * 60)
```
