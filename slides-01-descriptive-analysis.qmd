---
title: "Descriptive Analysis"
format: revealjs
slide-number: true
title-slide-attributes: 
  data-background: "#087e8b"
---

## Introduction

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(srvyr)
library(srvyrexploR)
library(broom)
```


Descriptive analyses lay the groundwork for the next steps of running statistical tests or developing models.

. . .

Calculate point estimates of...

- *Unknown population parameters*, such as mean.

. . .

- *Uncertainty estimates*, such as confidence intervals.

# Types of Data {.smaller}

## Types of Data

::: incremental

* Categorical/nominal data: variables with levels or descriptions that cannot be ordered, such as the region of the country (North, South, East, and West)
* Ordinal data: variables that can be ordered, such as those from a Likert scale (strongly disagree, disagree, agree, and strongly agree)
* Discrete data: variables that are counted or measured, such as number of children
* Continuous data: variables that are measured and whose values can lie anywhere on an interval, such as income

:::

## Types of Data

We can determine which statistics to use depending on the type of data.

<!--TODO: Make a chart-->

# Types of Measures

## Measures of Distribution

Measures of distribution describe how often an event or response occurs. 

We cover the following functions:

* Count of observations (`survey_count()` and `survey_tally()`)
* Summation of variables (`survey_total()`)

## Measures of Central Tendency

Measures of central tendency find the central (or average) responses. These measures include means and medians. 

We cover the following functions:

* Means and proportions (`survey_mean()` and `survey_prop()`)
* Quantiles and medians (`survey_quantile()` and `survey_median()`)

## Measure of Relationships

Measures of relationship describe how variables relate to each other. These measures include correlations and ratios. 

We cover the following functions:

- Correlations (`survey_corr()`)
- Ratios (`survey_ratio()`)

## Measures of Dispersion

Measures of dispersion describe how data spread around the central tendency for continuous variables. These measures include standard deviations and variances. We cover the following functions:

- Variances and standard deviations (`survey_var()` and `survey_sd()`)

# Survey Analysis Process

## Overview of Survey Analysis using the {srvyr} Package

1. Create a `tbl_svy` object (a survey object) using: `as_survey_design()` or `as_survey_rep()`

```{r}
#| include: false
targetpop <- 231592693

anes_adjwgt <- anes_2020 %>%
  mutate(Weight = Weight / sum(Weight) * targetpop)
```

## Overview of Survey Analysis using the {srvyr} Package

:::: {.columns}

::: {.column width="45%"}

For ANES:

```{r}
#| message: false
#| warning: false
anes_des <- anes_adjwgt %>%
  as_survey_design(
    weights = Weight,
    strata = Stratum,
    ids = VarUnit,
    nest = TRUE
  )
```

:::

::: {.column width="55%"}

For RECS:

```{r}
#| message: false
#| warning: false
recs_des <- recs_2020 %>%
  as_survey_rep(
    weights = NWEIGHT,
    repweights = NWEIGHT1:NWEIGHT60,
    type = "JK1",
    scale = 59 / 60,
    mse = TRUE
  )
```

:::

::::

## Overview of Survey Analysis using the {srvyr}` Package

2. Subset data (if needed) using `filter()` (to create subpopulations)

3. Specify domains of analysis using `group_by()`

4. Specify variables to calculate, including means, totals, proportions, quantiles, and more

# Calculating Variables

## `survey_count()`: Count of Observations

- Calculate the estimated observation counts for a given variable or combination of variables
- Applied to categorical data
- Sometimes called "cross-tabulations" or "cross-tabs"
- `survey_count()` functions similarly to `dplyr::count()` in that it is <b>NOT</b> called within `summarize()`

## `survey_count()`: Syntax

```{r}
#| eval: false
#| code-line-numbers: "|2|3|4|5|6|7|8"
survey_count(
   x,
   ...,
   wt = NULL,
   sort = FALSE,
   name = "n",
   .drop = dplyr::group_by_drop_default(x),
   vartype = c("se", "ci", "var", "cv")
)
```

## `survey_count`: Example

Calculate the estimated number of households in the U.S. using (RECS) data:

```{r}
#| eval: false
recs_des %>%
  survey_count()
```
. . .

```{r}
#| echo: false
recs_des %>%
  survey_count()
```

## `survey_count`: Subgroup Example

Calculate the estimated number of observations for Region and Division:

```{r}
#| eval: false
#| code-line-numbers: "|2"
recs_des %>%
  survey_count(Region, Division, name = "N")
```

. . .

```{r}
#| echo: false
recs_des %>%
  survey_count(Region, Division, name = "N")
```

## `survey_total()`: Totals and Sums

- Calculate the estimated total quantity in a population
- Applied to continuous data
- Must be called within `summarize()`
- `survey_count()` functions similarly to `dplyr::count()` in that it is <b>NOT</b> called within `summarize()`

## `survey_total()`: Syntax

```{r}
#| eval: false
survey_total(
  x,
  na.rm = FALSE,
  vartype = c("se", "ci", "var", "cv"),
  level = 0.95,
  deff = FALSE,
  df = NULL
)
```

## `survey_total()`: Example

Calculate the U.S. population count estimate:

```{r}
#| eval: false
recs_des %>%
  summarize(Tot = survey_total())
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(Tot = survey_total())
```

::: notes
Note that this result obtained from `survey_total()` is equivalent to the ones from the `survey_count()`, but `survey_total()` is called within `summarize()`.
:::

## `survey_total()`: Continuous Data Example

Calculate the total cost of electricity in whole dollars:

```{r}
#| eval: false
recs_des %>%
  summarize(elec_bill = survey_total(DOLLAREL))
```

. . .

```{r}
#| echo: false
recs_des %>%
  summarize(elec_bill = survey_total(DOLLAREL))
```

## `survey_total()`: Group By Example

Calculate the variation in the cost of electricity in whole dollars across regions:

```{r}
#| code-line-numbers: "|4"
recs_des %>%
  group_by(Region) %>%
  summarize(elec_bill = survey_total(DOLLAREL,
    vartype = "ci"
  ))
```

::: notes
Recall that `group_by()` precedes the creation of variables.
:::

