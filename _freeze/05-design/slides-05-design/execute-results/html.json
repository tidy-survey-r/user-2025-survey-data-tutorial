{
  "hash": "0ab4550a97658ab3867cde09f8f805a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Designs in {srvyr}\"\nformat: revealjs\nslide-number: true\ntitle-slide-attributes:\n      data-background: \"#087e8b\"\n---\n\n\n::: {.cell}\n\n:::\n\n\n# Sampling designs {background-color='{{< brand color secondary >}}'}\n\n## Sampling methods\n\nUnits can be selected in various ways such as:\n\n- **Simple random sampling (with or without replacement):** every unit has the same chance of being selected\n\n- **Systematic sampling:** sample individuals from an ordered list and sampling individuals at an interval with a random starting point\n\n- **Probability proportional to size:** probability of selection is proportional to \"size\"\n\n## Complex designs\n\nDesigns can also incorporate stratification and/or clustering:\n\n- **Stratified sampling:** divide population into mutually exclusive subgroups (strata). Randomly sample within each stratum\n\n- **Clustered sampling:** divide population into mutually exclusive subgroups (clusters). Randomly sample clusters and then individuals within clusters\n\n## Why design matters?\n\n- The design type impacts the variability of the estimates\n\n- Weights impact the point estimate and the variability estimates\n\n- Specifying the components of the design (strata and/or clusters) and weights in R is necessary to get correct estimates\n\n## Determining the design {.smaller}\n\n::: {.incremental}\n\n- Check the documentation such as methodology, design, analysis guide, or technical documentation\n\n- Documentation will indicate the variables needed to specify the design. Look for:\n   - weight (almost always)\n   - strata and/or clusters/PSUs. Sometimes pseudo-strata and pseudo-cluster OR\n   - replicate weights (this is used instead of strata/clusters for analysis)\n   - Finite population correction or population sizes (uncommon)\n\n- Documentation may include SAS, SUDAAN, Stata and/or R syntax\n\n:::\n\n::: {.notes}\n- We will show both ANES and RECS examples when diving into code\n:::\n\n\n\n# Specifying sampling designs in {srvyr} **without** replicate weights {background-color='{{< brand color secondary >}}'}\n\n## `as_survey_design()`: Syntax\n\n- Specifying the sampling design when you don't have replicate weights\n\n- `as_survey_design()` creates a `tbl_svy` object that then correctly calculates weighted estimates and SEs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_survey_design(\n  .data,\n  ids = NULL, # cluster IDs/PSUs\n  strata = NULL, # strata variables\n  variables = NULL, # defaults to all in .data\n  fpc = NULL, # variables defining the fpc\n  nest = FALSE, # TRUE/FALSE - relabel clusters to nest within strata\n  check_strata = !nest, # check that clusters are nested in strata\n  weights = NULL # weight variable,\n)\n```\n:::\n\n\n\n## Syntax for common designs  {.smaller}\n\nLoad in the example data from {survey} package:\n\n```r\ndata(api, package=\"survey\")\n```\n\n. . .\n\nSimple Random Sample (SRS)\n\n```r\napisrs %>% as_survey_design(fpc = fpc)\n```\n\n. . .\n\nStratified SRS\n\n```r\napistrat %>% as_survey_design(strata = stype, weights = pw)\n```\n\n. . .\n\nOne-stage cluster sample with a FPC variable\n\n```r\napiclus1 %>% as_survey_design(ids = dnum, weights = pw, fpc = fpc)\n```\n\n. . .\n\nTwo-stage cluster sample, weights computed from population size\n\n```r\napiclus2 %>% as_survey_design(ids = c(dnum, snum), fpc = c(fpc1, fpc2))\n```\n\n. . .\n\nStratified, cluster design\n\n```r\napistrat %>% as_survey_design(ids = dnum, strata = stype, weights =pw, nest = TRUE)\n```\n\n::: aside\nExamples from `srvyr` help documentation\n:::\n\n# Example  {background-color='{{< brand color blue >}}'}\n\n## Example: ANES 2020 {.smaller}\n\n- User Guide and Codebook^[<https://electionstudies.org/data-center/2020-time-series-study/>] : Section \"Data Analysis, Weights, and Variance Estimation\" includes information on weights and strata/cluster variables\n\n> For analysis of the complete set of cases using pre-election data only, including all\ncases and representative of the 2020 electorate, use the full sample pre-election\nweight, **V200010a**. For analysis including post-election data for the complete set of\nparticipants (i.e., analysis of post-election data only or a combination of pre- and\npost-election data), use the full sample post-election weight, **V200010b**. Additional\nweights are provided for analysis of subsets of the data, as follows.\n\nFor weight | Use variance unit/PSU/cluster | and use variance stratum\n-----------|-------------------------------|-------------------------\nV200010a| V200010c| V200010d\nV200010b| V200010c| V200010d\n\n\n## Example: ANES 2020 Syntax\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanes <- anes_2020 %>%\n  mutate(Weight = V200010b / sum(V200010b) * 231592693) # <1>\n\nanes_des <- anes %>%\n  as_survey_design(\n    weights = Weight, #<2>\n    strata = V200010d, #<3>\n    ids = V200010c, #<4>\n    nest = TRUE\n  ) #<5>\n```\n:::\n\n\n1. Adjust the weight of the ANES data to reflect the national population\n2. Specify the weight variable\n3. Specify the strata variable per documentation\n4. Specify the cluster variable per documentation\n5. Indicate that the clusters are nested within strata\n\n## Example: ANES 2020 Design\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(anes_des)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStratified 1 - level Cluster Sampling design (with replacement)\nWith (101) clusters.\nCalled via srvyr\nProbabilities:\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n4.839e-06 2.657e-05 4.689e-05 7.688e-05 8.331e-05 3.895e-03 \nStratum Sizes: \n             1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16\nobs        167 148 158 151 147 172 163 159 160 159 137 179 148 160 159 148\ndesign.PSU   3   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2\nactual.PSU   3   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2\n            17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32\nobs        158 156 154 144 170 146 165 147 169 165 172 133 157 167 154 143\ndesign.PSU   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2\nactual.PSU   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2\n            33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48\nobs        143 124 138 130 136 145 140 125 158 146 130 126 126 135 133 140\ndesign.PSU   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2\nactual.PSU   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2\n            49  50\nobs        133 130\ndesign.PSU   2   2\nactual.PSU   2   2\nData variables:\n [1] \"V200001\"                 \"CaseID\"                 \n [3] \"V200002\"                 \"InterviewMode\"          \n [5] \"V200010b\"                \"Weight\"                 \n [7] \"V200010c\"                \"VarUnit\"                \n [9] \"V200010d\"                \"Stratum\"                \n[11] \"V201006\"                 \"CampaignInterest\"       \n[13] \"V201023\"                 \"EarlyVote2020\"          \n[15] \"V201024\"                 \"V201025x\"               \n[17] \"V201028\"                 \"V201029\"                \n[19] \"V201101\"                 \"V201102\"                \n[21] \"VotedPres2016\"           \"V201103\"                \n[23] \"VotedPres2016_selection\" \"V201228\"                \n[25] \"V201229\"                 \"V201230\"                \n[27] \"V201231x\"                \"PartyID\"                \n[29] \"V201233\"                 \"TrustGovernment\"        \n[31] \"V201237\"                 \"TrustPeople\"            \n[33] \"V201507x\"                \"Age\"                    \n[35] \"AgeGroup\"                \"V201510\"                \n[37] \"Education\"               \"V201546\"                \n[39] \"V201547a\"                \"V201547b\"               \n[41] \"V201547c\"                \"V201547d\"               \n[43] \"V201547e\"                \"V201547z\"               \n[45] \"V201549x\"                \"RaceEth\"                \n[47] \"V201600\"                 \"Gender\"                 \n[49] \"V201607\"                 \"V201610\"                \n[51] \"V201611\"                 \"V201613\"                \n[53] \"V201615\"                 \"V201616\"                \n[55] \"V201617x\"                \"Income\"                 \n[57] \"Income7\"                 \"V202051\"                \n[59] \"V202066\"                 \"V202072\"                \n[61] \"VotedPres2020\"           \"V202073\"                \n[63] \"V202109x\"                \"V202110x\"               \n[65] \"VotedPres2020_selection\"\n```\n\n\n:::\n:::\n\n\n\n## National Health and Nutrition Examination Survey (NHANES) {.smaller}\n\n- Analysis weight: WTINT2YR\n- Variance Stratum: SDMVSTRA\n- Variance Primary Sampling Unit: VPSU\n- Large population\n\n::: {.panel-tabset}\n\n### Fill in the blank\n\n```r\nnhanes_des <- nhanes %>%\n   as_survey_design(\n      weights = ___________,\n      ids = ___________, \n      strata = ___________, \n      fpc = ___________, \n   )\n```\n\n### Solution\n\n```r\nnhanes_des <- nhanes %>%\n   as_survey_design(\n      weights = WTINT2YR,\n      ids = VPSU,\n      strata = SDMVSTRA,\n      fpc = NULL\n   )\n```\n\n:::\n\n# Replicate weight methods {background-color='{{< brand color secondary >}}'}\n\n## Replicate weights overview {.smaller}\n\nReplicate weights are another method to estimate variability. In general, they are constructed by:\n\n1. Divide the sample into subsample replicates that mirror the design of the sample\n2. Calculate weights for each replicate using the same procedures for the full-sample weight (i.e., nonresponse and post-stratification)\n3. Calculate estimates for each replicate using the same method as the full-sample estimate\n4. Calculate the estimated variance, which is proportional to the variance of the replicate estimates\n\n## Common replicate weight methods\n\n- Balanced repeated replication (BRR)\n- Fay's BRR\n- Jackknife\n- Bootstrap\n\n# Specifying sampling designs in {srvyr} **with** replicate weights {background-color='{{< brand color secondary >}}'}\n\n## `as_survey_rep()`: Syntax\n\n- `as_survey_rep()` creates a `tbl_svy` object that then correctly calculates weighted estimates and SEs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_survey_rep(\n  .data,\n  variables = NULL, # defaults to all in .data\n  repweights = NULL, # Variables specifying the replication weights\n  weights = NULL, # Variable specifying the analytic/main weight\n  type = c(\n    \"BRR\", \"Fay\", \"JK1\", \"JKn\", \"bootstrap\",\n    \"successive-difference\", \"ACS\", \"other\"\n  ), # Type of replication weight\n  combined_weights = TRUE, # TRUE if repweights already include sampling weights, usually TRUE\n  rho = NULL, # Shrinkage factor for Fay's method\n  bootstrap_average = NULL, # For type=\"bootstrap\", if the bootstrap weights have been averaged, gives the number of iterations averaged over\n  scale = NULL, # Scaling constant for variance\n  rscales = NULL, # Scaling constants for variance\n  mse = getOption(\"survey.replicates.mse\"), # If TRUE, compute variance based around point estimates rather than mean of replicates\n  degf = NULL, # Design degrees of freedom, otherwise calculated based on number of replicate weights\n)\n```\n:::\n\n\n\n## Syntax for common replicate methods {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-7|9-16|18-25|27-34\"}\nbrr_des <- dat %>%\n  as_survey_rep(\n    weights = WT,\n    repweights = starts_with(\"REPWT\"),\n    type = \"BRR\",\n    mse = TRUE\n  )\n\nfay_des <- dat %>%\n  as_survey_rep(\n    weights = WT0,\n    repweights = num_range(\"WT\", 1:20),\n    type = \"Fay\",\n    mse = TRUE,\n    rho = 0.3\n  )\n\njkn_des <- dat %>%\n  as_survey_rep(\n    weights = WT0,\n    repweights = WT1:WT20,\n    type = \"JKN\",\n    mse = TRUE,\n    rscales = rep(0.1, 20)\n  )\n\nbs_des <- dat %>%\n  as_survey_rep(\n    weights = pw,\n    repweights = pw1:pw50,\n    type = \"bootstrap\",\n    scale = 0.02186589,\n    mse = TRUE\n  )\n```\n:::\n\n\n- Note: this uses fake data and can't be run, just syntax examples\n\n# Example {background-color='{{< brand color blue >}}'}\n\n## Example: RECS 2020 {.smaller}\n\n- Using the microdata file to compute estimates and relative standard errors^[<https://www.eia.gov/consumption/residential/data/2020/pdf/microdata-guide.pdf>]\n\n> The following instructions are examples for calculating any RECS estimate using the final weights\n(NWEIGHT) and the associated RSE using the replicate weights (NWEIGHT1 – NWEIGHT60).\n\n- Includes R syntax for {survey} package which gets us what we need for {srvyr}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepweights <- select(RECS2020, NWEIGHT1:NWEIGHT60)\nRECS <- svrepdesign(\n  data = RECS2020,\n  weight = ~NWEIGHT,\n  repweights = repweights,\n  type = \"JK1\",\n  combined.weights = TRUE,\n  scale = (ncol(repweights) - 1) / ncol(repweights),\n  mse = TRUE\n)\n```\n:::\n\n\n## Example: RECS 2020 Syntax\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des <- recs_2020 %>%\n  as_survey_rep(\n    weight = NWEIGHT, #<1>\n    repweights = NWEIGHT1:NWEIGHT60, #<2>\n    type = \"JK1\", #<3>\n    scale = 59 / 60, #<4>\n    mse = TRUE #<5>\n  )\n```\n:::\n\n\n\n1. Specify the weight variable\n2. Specify the replicate weight variables\n3. Specify the replicate type per documentation\n4. Specify the scale\n5. Specify using MSE for variance estimation\n\n## Example: RECS 2020 Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(recs_des) #<6>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall: Called via srvyr\nUnstratified cluster jacknife (JK1) with 60 replicates and MSE variances.\nSampling variables:\n  - repweights: `NWEIGHT1 + NWEIGHT2 + NWEIGHT3 + NWEIGHT4 + NWEIGHT5 +\n    NWEIGHT6 + NWEIGHT7 + NWEIGHT8 + NWEIGHT9 + NWEIGHT10 + NWEIGHT11 +\n    NWEIGHT12 + NWEIGHT13 + NWEIGHT14 + NWEIGHT15 + NWEIGHT16 + NWEIGHT17 +\n    NWEIGHT18 + NWEIGHT19 + NWEIGHT20 + NWEIGHT21 + NWEIGHT22 + NWEIGHT23 +\n    NWEIGHT24 + NWEIGHT25 + NWEIGHT26 + NWEIGHT27 + NWEIGHT28 + NWEIGHT29 +\n    NWEIGHT30 + NWEIGHT31 + NWEIGHT32 + NWEIGHT33 + NWEIGHT34 + NWEIGHT35 +\n    NWEIGHT36 + NWEIGHT37 + NWEIGHT38 + NWEIGHT39 + NWEIGHT40 + NWEIGHT41 +\n    NWEIGHT42 + NWEIGHT43 + NWEIGHT44 + NWEIGHT45 + NWEIGHT46 + NWEIGHT47 +\n    NWEIGHT48 + NWEIGHT49 + NWEIGHT50 + NWEIGHT51 + NWEIGHT52 + NWEIGHT53 +\n    NWEIGHT54 + NWEIGHT55 + NWEIGHT56 + NWEIGHT57 + NWEIGHT58 + NWEIGHT59 +\n    NWEIGHT60` \n  - weights: NWEIGHT \nData variables: \n  - DOEID (dbl), ClimateRegion_BA (fct), Urbanicity (fct), Region (fct),\n    REGIONC (chr), Division (fct), STATE_FIPS (chr), state_postal (fct),\n    state_name (fct), HDD65 (dbl), CDD65 (dbl), HDD30YR (dbl), CDD30YR\n    (dbl), HousingUnitType (fct), YearMade (ord), TOTSQFT_EN (dbl), TOTHSQFT\n    (dbl), TOTCSQFT (dbl), SpaceHeatingUsed (lgl), ACUsed (lgl),\n    HeatingBehavior (fct), WinterTempDay (dbl), WinterTempAway (dbl),\n    WinterTempNight (dbl), ACBehavior (fct), SummerTempDay (dbl),\n    SummerTempAway (dbl), SummerTempNight (dbl), NWEIGHT (dbl), NWEIGHT1\n    (dbl), NWEIGHT2 (dbl), NWEIGHT3 (dbl), NWEIGHT4 (dbl), NWEIGHT5 (dbl),\n    NWEIGHT6 (dbl), NWEIGHT7 (dbl), NWEIGHT8 (dbl), NWEIGHT9 (dbl),\n    NWEIGHT10 (dbl), NWEIGHT11 (dbl), NWEIGHT12 (dbl), NWEIGHT13 (dbl),\n    NWEIGHT14 (dbl), NWEIGHT15 (dbl), NWEIGHT16 (dbl), NWEIGHT17 (dbl),\n    NWEIGHT18 (dbl), NWEIGHT19 (dbl), NWEIGHT20 (dbl), NWEIGHT21 (dbl),\n    NWEIGHT22 (dbl), NWEIGHT23 (dbl), NWEIGHT24 (dbl), NWEIGHT25 (dbl),\n    NWEIGHT26 (dbl), NWEIGHT27 (dbl), NWEIGHT28 (dbl), NWEIGHT29 (dbl),\n    NWEIGHT30 (dbl), NWEIGHT31 (dbl), NWEIGHT32 (dbl), NWEIGHT33 (dbl),\n    NWEIGHT34 (dbl), NWEIGHT35 (dbl), NWEIGHT36 (dbl), NWEIGHT37 (dbl),\n    NWEIGHT38 (dbl), NWEIGHT39 (dbl), NWEIGHT40 (dbl), NWEIGHT41 (dbl),\n    NWEIGHT42 (dbl), NWEIGHT43 (dbl), NWEIGHT44 (dbl), NWEIGHT45 (dbl),\n    NWEIGHT46 (dbl), NWEIGHT47 (dbl), NWEIGHT48 (dbl), NWEIGHT49 (dbl),\n    NWEIGHT50 (dbl), NWEIGHT51 (dbl), NWEIGHT52 (dbl), NWEIGHT53 (dbl),\n    NWEIGHT54 (dbl), NWEIGHT55 (dbl), NWEIGHT56 (dbl), NWEIGHT57 (dbl),\n    NWEIGHT58 (dbl), NWEIGHT59 (dbl), NWEIGHT60 (dbl), BTUEL (dbl), DOLLAREL\n    (dbl), BTUNG (dbl), DOLLARNG (dbl), BTULP (dbl), DOLLARLP (dbl), BTUFO\n    (dbl), DOLLARFO (dbl), BTUWOOD (dbl), TOTALBTU (dbl), TOTALDOL (dbl)\nVariables: \n  [1] \"DOEID\"            \"ClimateRegion_BA\" \"Urbanicity\"      \n  [4] \"Region\"           \"REGIONC\"          \"Division\"        \n  [7] \"STATE_FIPS\"       \"state_postal\"     \"state_name\"      \n [10] \"HDD65\"            \"CDD65\"            \"HDD30YR\"         \n [13] \"CDD30YR\"          \"HousingUnitType\"  \"YearMade\"        \n [16] \"TOTSQFT_EN\"       \"TOTHSQFT\"         \"TOTCSQFT\"        \n [19] \"SpaceHeatingUsed\" \"ACUsed\"           \"HeatingBehavior\" \n [22] \"WinterTempDay\"    \"WinterTempAway\"   \"WinterTempNight\" \n [25] \"ACBehavior\"       \"SummerTempDay\"    \"SummerTempAway\"  \n [28] \"SummerTempNight\"  \"NWEIGHT\"          \"NWEIGHT1\"        \n [31] \"NWEIGHT2\"         \"NWEIGHT3\"         \"NWEIGHT4\"        \n [34] \"NWEIGHT5\"         \"NWEIGHT6\"         \"NWEIGHT7\"        \n [37] \"NWEIGHT8\"         \"NWEIGHT9\"         \"NWEIGHT10\"       \n [40] \"NWEIGHT11\"        \"NWEIGHT12\"        \"NWEIGHT13\"       \n [43] \"NWEIGHT14\"        \"NWEIGHT15\"        \"NWEIGHT16\"       \n [46] \"NWEIGHT17\"        \"NWEIGHT18\"        \"NWEIGHT19\"       \n [49] \"NWEIGHT20\"        \"NWEIGHT21\"        \"NWEIGHT22\"       \n [52] \"NWEIGHT23\"        \"NWEIGHT24\"        \"NWEIGHT25\"       \n [55] \"NWEIGHT26\"        \"NWEIGHT27\"        \"NWEIGHT28\"       \n [58] \"NWEIGHT29\"        \"NWEIGHT30\"        \"NWEIGHT31\"       \n [61] \"NWEIGHT32\"        \"NWEIGHT33\"        \"NWEIGHT34\"       \n [64] \"NWEIGHT35\"        \"NWEIGHT36\"        \"NWEIGHT37\"       \n [67] \"NWEIGHT38\"        \"NWEIGHT39\"        \"NWEIGHT40\"       \n [70] \"NWEIGHT41\"        \"NWEIGHT42\"        \"NWEIGHT43\"       \n [73] \"NWEIGHT44\"        \"NWEIGHT45\"        \"NWEIGHT46\"       \n [76] \"NWEIGHT47\"        \"NWEIGHT48\"        \"NWEIGHT49\"       \n [79] \"NWEIGHT50\"        \"NWEIGHT51\"        \"NWEIGHT52\"       \n [82] \"NWEIGHT53\"        \"NWEIGHT54\"        \"NWEIGHT55\"       \n [85] \"NWEIGHT56\"        \"NWEIGHT57\"        \"NWEIGHT58\"       \n [88] \"NWEIGHT59\"        \"NWEIGHT60\"        \"BTUEL\"           \n [91] \"DOLLAREL\"         \"BTUNG\"            \"DOLLARNG\"        \n [94] \"BTULP\"            \"DOLLARLP\"         \"BTUFO\"           \n [97] \"DOLLARFO\"         \"BTUWOOD\"          \"TOTALBTU\"        \n[100] \"TOTALDOL\"        \n```\n\n\n:::\n:::\n\n\n## American Community Survey (ACS)\n\n- Analysis weight: PWGTP\n- replicate weights: PWGTP1-PWGTP180\n- jackknife with scale adjustment of 4/80\n\n::: {.panel-tabset}\n\n### Fill in the blank\n\n```r\nacs_des <- acs_pums %>%\n   as_survey_rep(\n      weights = ___________,\n      repweights = ___________,\n      type = ___________,\n      scale = _________ \n   )\n```\n\n### Solution\n\n```r\nacs_des <- acs_pums %>%\n   as_survey_rep(\n      weights = PWGTP,\n      repweights = num_range(\"PWGTP\", 1:80),\n      type = \"JK1\",\n      scale = 4/80\n   )\n\n```\n\n:::\n\n# Your Turn {background-color='{{< brand color pink >}}'}\n\nOpen `05-design-exercises.qmd`\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_0ecc291c\" data-warn-when=\"300\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">20</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Open Q & A {background-color='{{< brand color secondary >}}'}\n",
    "supporting": [
      "slides-05-design_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}