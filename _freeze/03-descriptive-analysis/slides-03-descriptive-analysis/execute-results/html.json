{
  "hash": "78fdde6e762a843aad8bd1845f553155",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Descriptive Analysis\"\nformat: revealjs\nslide-number: true\ntitle-slide-attributes: \n  data-background: \"#087e8b\"\n---\n\n\n\n## Introduction\n\n\n\n\n\n\n\n<!--TODO: Add ratios? Standard deviation? across()? purrr?-->\n\nDescriptive analyses lay the groundwork for the next steps of running statistical tests or developing models.\n\n. . .\n\nCalculate point estimates of...\n\n- *Unknown population parameters*, such as mean.\n\n. . .\n\n- *Uncertainty estimates*, such as confidence intervals.\n\n# Types of Data {background-color='{{< brand color secondary >}}' .smaller}\n\n## Types of Data\n\n::: incremental\n\n* Categorical/nominal data: variables with levels or descriptions that cannot be ordered, such as the region of the country (North, South, East, and West)\n* Ordinal data: variables that can be ordered, such as those from a Likert scale (strongly disagree, disagree, agree, and strongly agree)\n* Discrete data: variables that are counted or measured, such as number of children\n* Continuous data: variables that are measured and whose values can lie anywhere on an interval, such as income\n\n:::\n\n## Types of Data\n\nWe can determine which statistics to use depending on the type of data.\n\n<!--TODO: Make a chart-->\n\n# Types of Measures {background-color='{{< brand color secondary >}}'}\n\n## Measures of Distribution\n\nMeasures of distribution describe how often an event or response occurs. \n\nWe cover the following functions:\n\n* Count of observations (`survey_count()` and `survey_tally()`)\n* Summation of variables (`survey_total()`)\n\n## Measures of Central Tendency\n\nMeasures of central tendency find the central (or average) responses. These measures include means and medians. \n\n* Means and proportions (`survey_mean()` and `survey_prop()`)\n* Quantiles and medians (`survey_quantile()` and `survey_median()`)\n\n## Measure of Relationships\n\nMeasures of relationship describe how variables relate to each other. These measures include correlations and ratios. \n\n- Correlations (`survey_corr()`)\n- Ratios (`survey_ratio()`)\n\n## Measures of Dispersion\n\nMeasures of dispersion describe how data spread around the central tendency for continuous variables. These measures include standard deviations and variances. We cover the following functions:\n\n- Variances and standard deviations (`survey_var()` and `survey_sd()`)\n\n# Survey Analysis Process {background-color='{{< brand color secondary >}}'}\n\n## Overview of Survey Analysis using the {srvyr} Package\n\n1. Create a `tbl_svy` object (a survey object) using: `as_survey_design()` or `as_survey_rep()`\n\n\n\n\n\n\n\n## Overview of Survey Analysis using the {srvyr} Package\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n\nFor ANES:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanes_des <- anes_adjwgt %>%\n  as_survey_design(\n    weights = Weight,\n    strata = Stratum,\n    ids = VarUnit,\n    nest = TRUE\n  )\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"55%\"}\n\nFor RECS:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des <- recs_2020 %>%\n  as_survey_rep(\n    weights = NWEIGHT,\n    repweights = NWEIGHT1:NWEIGHT60,\n    type = \"JK1\",\n    scale = 59 / 60,\n    mse = TRUE\n  )\n```\n:::\n\n\n\n:::\n\n::::\n\n## Overview of Survey Analysis using the {srvyr}` Package\n\n2. Subset data (if needed) using `filter()` (to create subpopulations)\n\n3. Specify domains of analysis using `group_by()`\n\n4. Specify variables to calculate, including means, totals, proportions, quantiles, and more\n\n# Count of Observations {background-color='{{< brand color secondary >}}'}\n\n## `survey_count()`: Count of Observations\n\n::: incremental\n- Calculate the estimated observation counts for a given variable or combination of variables\n- Applied to categorical data\n- Sometimes called \"cross-tabulations\" or \"cross-tabs\"\n- `survey_count()` functions similarly to `dplyr::count()` in that it is <b>NOT</b> called within `summarize()`\n:::\n\n## `survey_count()` Syntax\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4|5|6|7|8\"}\nsurvey_count(\n  x,\n  ...,\n  wt = NULL,\n  sort = FALSE,\n  name = \"n\",\n  .drop = dplyr::group_by_drop_default(x),\n  vartype = c(\"se\", \"ci\", \"var\", \"cv\")\n)\n```\n:::\n\n\n\n# Example <br>count of observations {background-color='{{< brand color blue >}}'}\n\n## Example: count of observations\n\nCalculate the estimated number of households in the U.S. using (RECS) data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  survey_count()\n```\n:::\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n           n  n_se\n       <dbl> <dbl>\n1 123529025. 0.148\n```\n\n\n:::\n:::\n\n\n\n## Example: count of subgroups\n\nCalculate the estimated number of observations for Region and Division:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nrecs_des %>%\n  survey_count(Region, Division, name = \"N\")\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   Region    Division                   N         N_se\n   <fct>     <fct>                  <dbl>        <dbl>\n 1 Northeast New England         5876166  0.0000000137\n 2 Northeast Middle Atlantic    16043503  0.0000000487\n 3 Midwest   East North Central 18546912  0.000000437 \n 4 Midwest   West North Central  8495815  0.0000000177\n 5 South     South Atlantic     24843261  0.0000000418\n 6 South     East South Central  7380717. 0.114       \n 7 South     West South Central 14619094  0.000488    \n 8 West      Mountain North      4615844  0.119       \n 9 West      Mountain South      4602070  0.0000000492\n10 West      Pacific            18505643. 0.00000295  \n```\n\n\n:::\n:::\n\n\n\n# Summation of Variables {background-color='{{< brand color secondary >}}'}\n\n## `survey_total()`: Summation of Variables\n\n::: incremental\n- Calculate the estimated total quantity in a population\n- Applied to continuous data\n- Must be called within `summarize()`\n- If used with no x-variable, `survey_total()` calculates a population count estimate within `summarize()`\n:::\n\n## `survey_total()` syntax\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_total(\n  x,\n  na.rm = FALSE,\n  vartype = c(\"se\", \"ci\", \"var\", \"cv\"),\n  level = 0.95,\n  deff = FALSE,\n  df = NULL\n)\n```\n:::\n\n\n\n# Example <br>summation of variables {background-color='{{< brand color blue >}}'}\n\n## Example: Calculating total estimate (discrete)\n\nCalculate the U.S. population count estimate:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  summarize(Tot = survey_total())\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n         Tot Tot_se\n       <dbl>  <dbl>\n1 123529025.  0.148\n```\n\n\n:::\n:::\n\n\n\n::: notes\nNote that this result obtained from `survey_total()` is equivalent to the ones from the `survey_count()`, but `survey_total()` is called within `summarize()`.\n:::\n\n## Example: Calculating total estimate (continuous)\n\nCalculate the total cost of electricity in whole dollars:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  summarize(elec_bill = survey_total(DOLLAREL))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n      elec_bill elec_bill_se\n          <dbl>        <dbl>\n1 170473527909.   664893504.\n```\n\n\n:::\n:::\n\n\n\n## Example: Calculating total estimate with groups\n\nCalculate the variation in the cost of electricity in whole dollars across regions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|4\"}\nrecs_des %>%\n  group_by(Region) %>%\n  summarize(elec_bill = survey_total(DOLLAREL,\n    vartype = \"ci\"\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  Region       elec_bill elec_bill_low elec_bill_upp\n  <fct>            <dbl>         <dbl>         <dbl>\n1 Northeast 29430369947.  28788987554.  30071752341.\n2 Midwest   34972544751.  34339576041.  35605513460.\n3 South     72496840204.  71534780902.  73458899506.\n4 West      33573773008.  32909111702.  34238434313.\n```\n\n\n:::\n:::\n\n\n\n::: notes\nRecall that `group_by()` precedes the creation of variables.\n:::\n\n# Means and proportions {background-color='{{< brand color secondary >}}'}\n\n## `survey_mean()` and `survey_prop()`: Means and Proportions\n\n::: incremental\n- Calculate the estimated observation counts for a given variable or combination of variables\n- `survey_mean()` applied to continuous data, `survey_prop()` to catagorical data\n- Must be called within `summarize()`\n:::\n\n## `survey_mean()` Syntax\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|6\"}\nsurvey_mean(\n  x,\n  na.rm = FALSE,\n  vartype = c(\"se\", \"ci\", \"var\", \"cv\"),\n  level = 0.95,\n  proportion = FALSE,\n  prop_method = c(\"logit\", \"likelihood\", \"asin\", \"beta\", \"mean\"),\n  deff = FALSE,\n  df = NULL\n)\n```\n:::\n\n\n\n::: notes\nThe survey_mean() function includes the first argument x, representing the variable or expression on which the mean should be calculated. The survey_mean() function can be used to calculate both means and proportions. Its proportion argument defaults to FALSE, indicating it is used for calculating means. If we wish to calculate a proportion using survey_mean(), we need to set the proportion argument to TRUE.\n:::\n\n## `survey_prop()` Syntax\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1,2|5\"}\nsurvey_prop(\n  na.rm = FALSE,\n  vartype = c(\"se\", \"ci\", \"var\", \"cv\"),\n  level = 0.95,\n  proportion = TRUE,\n  prop_method =\n    c(\"logit\", \"likelihood\", \"asin\", \"beta\", \"mean\", \"xlogit\"),\n  deff = FALSE,\n  df = NULL\n)\n```\n:::\n\n\n\n::: notes\nThe survey_prop() does not have an argument to include the variables directly. Instead, prior to summarize(), we must use the group_by() function to specify the variables of interest for survey_prop(). For survey_mean(), including a group_by() function allows us to obtain the means by different groups.\n\nIn the survey_prop() function, the proportion argument defaults to TRUE because the function is specifically designed for calculating proportions.\n:::\n\n# Example <br>means and proportions {background-color='{{< brand color blue >}}'}\n\n## Example: One Variable Proportion\n\nCalculate the proportion of people in each region in the RECS data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  group_by(Region) %>%\n  summarize(p = survey_prop())\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  Region        p     p_se\n  <fct>     <dbl>    <dbl>\n1 Northeast 0.177 2.12e-10\n2 Midwest   0.219 2.62e-10\n3 South     0.379 7.40e-10\n4 West      0.224 8.16e-10\n```\n\n\n:::\n:::\n\n\n\n## Example: One Variable Proportion\n\nCalculate the proportion of people in each region in the RECS data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  group_by(Region) %>%\n  summarize(p = survey_mean())\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  Region        p     p_se\n  <fct>     <dbl>    <dbl>\n1 Northeast 0.177 2.12e-10\n2 Midwest   0.219 2.62e-10\n3 South     0.379 7.40e-10\n4 West      0.224 8.16e-10\n```\n\n\n:::\n:::\n\n\n\n::: notes\nNote that the proportions in column p add up to one. The survey_prop() function is essentially the same as using survey_mean() with a categorical variable and without specifying a numeric variable in the x argument.\n:::\n\n## Example: Conditional Proportions\n\nCalculate the proportion of housing units by Region and whether air conditioning (A/C) is used:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  group_by(Region, ACUsed) %>%\n  summarize(p = survey_prop())\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n# Groups:   Region [4]\n  Region    ACUsed      p    p_se\n  <fct>     <lgl>   <dbl>   <dbl>\n1 Northeast FALSE  0.110  0.00590\n2 Northeast TRUE   0.890  0.00590\n3 Midwest   FALSE  0.0666 0.00508\n4 Midwest   TRUE   0.933  0.00508\n5 South     FALSE  0.0581 0.00278\n6 South     TRUE   0.942  0.00278\n7 West      FALSE  0.255  0.00759\n8 West      TRUE   0.745  0.00759\n```\n\n\n:::\n:::\n\n\n\n::: notes\nWhen specifying multiple variables, the proportions are conditional. In the results above, notice that the proportions sum to 1 within each region. This can be interpreted as the proportion of housing units with A/C within each region. For example, in the Northeast region, approximately 11.0% of housing units don’t have A/C, while around 89.0% have A/C.\n:::\n\n## Example: Joint Proportions\n\nCalculate the joint proportion for each combination using `interact()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  group_by(interact(Region, ACUsed)) %>%\n  summarize(p = survey_prop())\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  Region    ACUsed      p    p_se\n  <fct>     <lgl>   <dbl>   <dbl>\n1 Northeast FALSE  0.0196 0.00105\n2 Northeast TRUE   0.158  0.00105\n3 Midwest   FALSE  0.0146 0.00111\n4 Midwest   TRUE   0.204  0.00111\n5 South     FALSE  0.0220 0.00106\n6 South     TRUE   0.357  0.00106\n7 West      FALSE  0.0573 0.00170\n8 West      TRUE   0.167  0.00170\n```\n\n\n:::\n:::\n\n\n\n::: notes\nIn this case, all proportions sum to 1, not just within regions. This means that 15.8% of the population lives in the Northeast and has A/C. As noted earlier, we can use both the survey_prop() and survey_mean() functions, and they produce the same results. \n:::\n\n## Example: Overall Mean\n\nCalculate the estimated average cost of electricity in the U.S.:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nrecs_des %>%\n  summarize(elec_bill = survey_mean(DOLLAREL,\n    vartype = c(\"se\", \"ci\")\n  ))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  elec_bill elec_bill_se elec_bill_low elec_bill_upp\n      <dbl>        <dbl>         <dbl>         <dbl>\n1     1380.         5.38         1369.         1391.\n```\n\n\n:::\n:::\n\n\n\n## Example: Mean by Subgroup\n\nCalculate the estimated average cost of electricity in the U.S. by each region:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nrecs_des %>%\n  group_by(Region) %>%\n  summarize(elec_bill = survey_mean(DOLLAREL))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  Region    elec_bill elec_bill_se\n  <fct>         <dbl>        <dbl>\n1 Northeast     1343.         14.6\n2 Midwest       1293.         11.7\n3 South         1548.         10.3\n4 West          1211.         12.0\n```\n\n\n:::\n:::\n\n\n\n# Your Turn {background-color='{{< brand color pink >}}'}\n\n* Open `03-descriptive-exercises.qmd`\n* Work through **Exercises - Part 1**\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_d4144cbe\" data-warn-when=\"300\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# Quantiles and Medians {background-color='{{< brand color secondary >}}'}\n\n## `survey_quantile()` and `survey_median()`: Quantiles and Medians\n\n::: incremental\n- Calculate quantiles at specific points\n- Because median is a special, common case of quantiles, there is the `survey_median()` function\n- Must be called within `summarize()`\n:::\n\n## `survey_quantile()` Syntax\n\n```r\nsurvey_quantile(\n  x,\n  quantiles,\n  na.rm = FALSE,\n  vartype = c(\"se\", \"ci\", \"var\", \"cv\"),\n  level = 0.95,\n  interval_type = \n    c(\"mean\", \"beta\", \"xlogit\", \"asin\", \"score\", \"quantile\"),\n  qrule = c(\"math\", \"school\", \"shahvaish\", \"hf1\", \"hf2\", \"hf3\", \n            \"hf4\", \"hf5\", \"hf6\", \"hf7\", \"hf8\", \"hf9\"),\n  df = NULL\n)\n```\n\n# Example <br>quantiles and medians {background-color='{{< brand color blue >}}'}\n\n## Example: Quantiles\n\nCalculate the first quartile (p=0.25), the median (p=0.5), and the third quartile (p=0.75) of electric bills:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  summarize(elec_bill = survey_quantile(DOLLAREL,\n    quantiles = c(0.25, .5, 0.75)\n  ))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  elec_bill_q25 elec_bill_q50 elec_bill_q75 elec_bill_q25_se elec_bill_q50_se\n          <dbl>         <dbl>         <dbl>            <dbl>            <dbl>\n1          795.         1215.         1770.             5.69             6.33\n# ℹ 1 more variable: elec_bill_q75_se <dbl>\n```\n\n\n:::\n:::\n\n\n\n# Example <br>quantiles and medians {background-color='{{< brand color blue >}}'}\n\n## Example: median\n\nCalculate the estimated median cost of electricity in the U.S.:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  summarize(elec_bill = survey_median(DOLLAREL))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  elec_bill elec_bill_se\n      <dbl>        <dbl>\n1     1215.         6.33\n```\n\n\n:::\n:::\n\n\n\n# Correlations {background-color='{{< brand color secondary >}}'}\n\n## `survey_corr()`: Measure the linear relationship between two continuous variables\n\n::: incremental\n- The most commonly used method is Pearson’s correlation\n- Ranges between –1 and 1\n:::\n\n## `survey_corr()` Syntax\n\n```r\nsurvey_corr(\n  x,\n  y,\n  na.rm = FALSE,\n  vartype = c(\"se\", \"ci\", \"var\", \"cv\"),\n  level = 0.95,\n  df = NULL\n)\n```\n\n# Example <br>correlation {background-color='{{< brand color blue >}}'}\n\n## Example: correlation\n\nCalculate the correlation between the total square footage of homes and electricity consumption:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  summarize(SQFT_Elec_Corr = survey_corr(TOTSQFT_EN, BTUEL))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  SQFT_Elec_Corr SQFT_Elec_Corr_se\n           <dbl>             <dbl>\n1          0.417           0.00689\n```\n\n\n:::\n:::\n\n\n\n# Unweighted analysis {background-color='{{< brand color secondary >}}'}\n\n## `unweighted()`: Unweighted analysis\n\n::: incremental\n\n- Sometimes, it is helpful to calculate an unweighted estimate of a given variable\n- `unweighted()` does not extrapolate to a population estimate\n- Used in conjunction with any {dplyr} functions\n\n:::\n\n# Example <br>unweighted analysis {background-color='{{< brand color blue >}}'}\n\n## Example: Unweighted Analysis\n\nCalculate the unweighted average household electricity cost: \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nrecs_des %>%\n  summarize(\n    elec_bill = survey_mean(DOLLAREL),\n    elec_unweight = unweighted(mean(DOLLAREL))\n  )\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  elec_bill elec_bill_se elec_unweight\n      <dbl>        <dbl>         <dbl>\n1     1380.         5.38         1425.\n```\n\n\n:::\n:::\n\n\n\n# Subpopulation analysis {background-color='{{< brand color secondary >}}'}\n\n## `filter()`: Subpopulation Analysis\n\n::: incremental\n- Use `filter()` to subset a survey object for analysis\n- Must be done after creating the survey design object\n:::\n\n# Example <br>subpopulation analysis {background-color='{{< brand color blue >}}'}\n\n## Example: subpopulation analysis\n\nCalculate an estimate of the average amount spent on natural gas among housing units using natural gas:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecs_des %>%\n  filter(BTUNG > 0) %>%\n  summarize(NG_mean = survey_mean(DOLLARNG,\n    vartype = c(\"se\", \"ci\")\n  ))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  NG_mean NG_mean_se NG_mean_low NG_mean_upp\n    <dbl>      <dbl>       <dbl>       <dbl>\n1    631.       4.64        621.        640.\n```\n\n\n:::\n:::\n\n\n\n# Adding summary rows {background-color='{{< brand color secondary >}}'}\n\n## `cascade()`: Adding Summary Rows\n\n::: incremental\n- Creates a summary row for the estimate representing the entire population\n- The {srvyr} package has the convenient cascade() function\n- Used instead of `summarize()`\n:::\n\n## `cascade()`: Syntax\n\n```r\ncascade(\n  .data, \n  ..., \n  .fill = NA, \n  .fill_level_top = FALSE, \n  .groupings = NULL\n)\n```\n\n# Example <br>summary rows {background-color='{{< brand color blue >}}'}\n\n## Example: Adding summary rows\n\nCalculate the average household electricity cost. Let's build on it to show the features of `cascade()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nrecs_des %>%\n  cascade(DOLLAREL_mn = survey_mean(DOLLAREL))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  DOLLAREL_mn DOLLAREL_mn_se\n        <dbl>          <dbl>\n1       1380.           5.38\n```\n\n\n:::\n:::\n\n\n\n## Example: Adding summary rows with groups\n\nGroup by region:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nrecs_des %>%\n  group_by(Region) %>%\n  cascade(DOLLAREL_mn = survey_mean(DOLLAREL))\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  Region    DOLLAREL_mn DOLLAREL_mn_se\n  <fct>           <dbl>          <dbl>\n1 Northeast       1343.          14.6 \n2 Midwest         1293.          11.7 \n3 South           1548.          10.3 \n4 West            1211.          12.0 \n5 <NA>            1380.           5.38\n```\n\n\n:::\n:::\n\n\n\n## Example: Adding summary rows with groups\n\nGive the summary row a better name with `.fill`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nrecs_des %>%\n  group_by(Region) %>%\n  cascade(\n    DOLLAREL_mn = survey_mean(DOLLAREL),\n    .fill = \"National\"\n  )\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  Region    DOLLAREL_mn DOLLAREL_mn_se\n  <fct>           <dbl>          <dbl>\n1 Northeast       1343.          14.6 \n2 Midwest         1293.          11.7 \n3 South           1548.          10.3 \n4 West            1211.          12.0 \n5 National        1380.           5.38\n```\n\n\n:::\n:::\n\n\n\n## Example: Adding summary rows with groups\n\nMove the summary row to the top with `.fill_level_top = TRUE`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\nrecs_des %>%\n  group_by(Region) %>%\n  cascade(\n    DOLLAREL_mn = survey_mean(DOLLAREL),\n    .fill = \"National\",\n    .fill_level_top = TRUE\n  )\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  Region    DOLLAREL_mn DOLLAREL_mn_se\n  <fct>           <dbl>          <dbl>\n1 National        1380.           5.38\n2 Northeast       1343.          14.6 \n3 Midwest         1293.          11.7 \n4 South           1548.          10.3 \n5 West            1211.          12.0 \n```\n\n\n:::\n:::\n\n\n\n# Wrap Up {background-color='{{< brand color secondary >}}'}\n\n## Wrap Up\n\nDescriptive analyses...\n\n- lay the groundwork for the next steps of running statistical tests or developing models\n- help us glean insight into the data, the underlying population, and any unique aspects of the data or population\n\n## Wrap Up\n\nThe {srvyr} package has functions for calculating measures of distribution, central tendency, relationship, and dispersion.\n\n- Depending on the type of data, we determine what statistics to calculate\n\n## Wrap Up\n\n- We create variables after creating the design object, running the functions on the `tbl_svy` object\n- `filter()` and `group_by()` precede the calculation functions, but still follow the design object\n- There are additional functions for unweighted analyses and calculating summary rows\n\n# Your Turn {background-color='{{< brand color pink >}}'}\n\n* Open `03-descriptive-exercises.qmd`\n* Work through **Exercises - Part 2**\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_37720c77\" data-warn-when=\"300\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}